{"ast":null,"code":"import React,{useEffect,useRef,useState}from'react';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const GRID_SIZE=20;const CELL_SIZE=20;const INITIAL_SPEED=150;const SnakeGame=()=>{const canvasRef=useRef(null);const[gameOver,setGameOver]=useState(false);const[score,setScore]=useState(0);const[snake,setSnake]=useState([{x:5,y:5}]);const[food,setFood]=useState({x:10,y:10});const[direction,setDirection]=useState({x:1,y:0});const[gameStarted,setGameStarted]=useState(false);const[speed,setSpeed]=useState(INITIAL_SPEED);useEffect(()=>{const canvas=canvasRef.current;if(!canvas)return;const ctx=canvas.getContext('2d');if(!ctx)return;// Set canvas size\ncanvas.width=GRID_SIZE*CELL_SIZE;canvas.height=GRID_SIZE*CELL_SIZE;// Handle keyboard input\nconst handleKeyDown=e=>{if(!gameStarted&&e.key===' '){setGameStarted(true);return;}switch(e.key){case'ArrowUp':if(direction.y!==1)setDirection({x:0,y:-1});break;case'ArrowDown':if(direction.y!==-1)setDirection({x:0,y:1});break;case'ArrowLeft':if(direction.x!==1)setDirection({x:-1,y:0});break;case'ArrowRight':if(direction.x!==-1)setDirection({x:1,y:0});break;}};window.addEventListener('keydown',handleKeyDown);// Game loop\nlet gameInterval;const moveSnake=()=>{if(gameOver||!gameStarted)return;setSnake(prevSnake=>{const head={...prevSnake[0]};head.x+=direction.x;head.y+=direction.y;// Check for collisions with walls\nif(head.x<0||head.x>=GRID_SIZE||head.y<0||head.y>=GRID_SIZE){setGameOver(true);return prevSnake;}// Check for collisions with self\nif(prevSnake.some(segment=>segment.x===head.x&&segment.y===head.y)){setGameOver(true);return prevSnake;}const newSnake=[head];if(head.x===food.x&&head.y===food.y){// Snake ate food\nsetScore(prev=>prev+10);setFood({x:Math.floor(Math.random()*GRID_SIZE),y:Math.floor(Math.random()*GRID_SIZE)});// Increase speed every 50 points\nif(score%50===0&&speed>50){setSpeed(prev=>prev-10);}// Add all previous segments\nnewSnake.push(...prevSnake);}else{// Add all segments except the last one\nnewSnake.push(...prevSnake.slice(0,-1));}return newSnake;});};if(gameStarted&&!gameOver){gameInterval=setInterval(moveSnake,speed);}// Draw game\nconst draw=()=>{if(!ctx)return;// Clear canvas\nctx.fillStyle='#000000';ctx.fillRect(0,0,canvas.width,canvas.height);// Draw snake\nctx.fillStyle='#00ff00';snake.forEach(segment=>{ctx.fillRect(segment.x*CELL_SIZE,segment.y*CELL_SIZE,CELL_SIZE-1,CELL_SIZE-1);});// Draw food\nctx.fillStyle='#ff0000';ctx.fillRect(food.x*CELL_SIZE,food.y*CELL_SIZE,CELL_SIZE-1,CELL_SIZE-1);// Draw score\nctx.fillStyle='#ffffff';ctx.font='20px Arial';ctx.fillText(`Score: ${score}`,10,30);if(!gameStarted){ctx.fillStyle='#ffffff';ctx.font='24px Arial';ctx.textAlign='center';ctx.fillText('Press SPACE to Start',canvas.width/2,canvas.height/2);ctx.font='16px Arial';ctx.fillText('Use arrow keys to move',canvas.width/2,canvas.height/2+30);}if(gameOver){ctx.fillStyle='rgba(0, 0, 0, 0.75)';ctx.fillRect(0,0,canvas.width,canvas.height);ctx.fillStyle='#ffffff';ctx.font='24px Arial';ctx.textAlign='center';ctx.fillText('Game Over!',canvas.width/2,canvas.height/2-20);ctx.fillText(`Final Score: ${score}`,canvas.width/2,canvas.height/2+20);}};const animationFrame=requestAnimationFrame(draw);return()=>{window.removeEventListener('keydown',handleKeyDown);clearInterval(gameInterval);cancelAnimationFrame(animationFrame);};},[snake,food,direction,gameOver,gameStarted,score,speed]);const restartGame=()=>{setGameOver(false);setScore(0);setSnake([{x:5,y:5}]);setFood({x:10,y:10});setDirection({x:1,y:0});setGameStarted(false);setSpeed(INITIAL_SPEED);};return/*#__PURE__*/_jsxs(\"div\",{className:\"snake-game\",children:[/*#__PURE__*/_jsx(\"canvas\",{ref:canvasRef}),gameOver&&/*#__PURE__*/_jsx(\"div\",{className:\"game-over\",children:/*#__PURE__*/_jsx(\"button\",{onClick:restartGame,children:\"Play Again\"})})]});};export default SnakeGame;","map":{"version":3,"names":["React","useEffect","useRef","useState","jsx","_jsx","jsxs","_jsxs","GRID_SIZE","CELL_SIZE","INITIAL_SPEED","SnakeGame","canvasRef","gameOver","setGameOver","score","setScore","snake","setSnake","x","y","food","setFood","direction","setDirection","gameStarted","setGameStarted","speed","setSpeed","canvas","current","ctx","getContext","width","height","handleKeyDown","e","key","window","addEventListener","gameInterval","moveSnake","prevSnake","head","some","segment","newSnake","prev","Math","floor","random","push","slice","setInterval","draw","fillStyle","fillRect","forEach","font","fillText","textAlign","animationFrame","requestAnimationFrame","removeEventListener","clearInterval","cancelAnimationFrame","restartGame","className","children","ref","onClick"],"sources":["/home/yash/Desktop/yashbhangale.github.io/portfolio-terminal/src/components/SnakeGame.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\n\ninterface Position {\n  x: number;\n  y: number;\n}\n\nconst GRID_SIZE = 20;\nconst CELL_SIZE = 20;\nconst INITIAL_SPEED = 150;\n\nconst SnakeGame: React.FC = () => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const [gameOver, setGameOver] = useState(false);\n  const [score, setScore] = useState(0);\n  const [snake, setSnake] = useState<Position[]>([{ x: 5, y: 5 }]);\n  const [food, setFood] = useState<Position>({ x: 10, y: 10 });\n  const [direction, setDirection] = useState<Position>({ x: 1, y: 0 });\n  const [gameStarted, setGameStarted] = useState(false);\n  const [speed, setSpeed] = useState(INITIAL_SPEED);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Set canvas size\n    canvas.width = GRID_SIZE * CELL_SIZE;\n    canvas.height = GRID_SIZE * CELL_SIZE;\n\n    // Handle keyboard input\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (!gameStarted && e.key === ' ') {\n        setGameStarted(true);\n        return;\n      }\n\n      switch (e.key) {\n        case 'ArrowUp':\n          if (direction.y !== 1) setDirection({ x: 0, y: -1 });\n          break;\n        case 'ArrowDown':\n          if (direction.y !== -1) setDirection({ x: 0, y: 1 });\n          break;\n        case 'ArrowLeft':\n          if (direction.x !== 1) setDirection({ x: -1, y: 0 });\n          break;\n        case 'ArrowRight':\n          if (direction.x !== -1) setDirection({ x: 1, y: 0 });\n          break;\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n\n    // Game loop\n    let gameInterval: NodeJS.Timeout;\n\n    const moveSnake = () => {\n      if (gameOver || !gameStarted) return;\n\n      setSnake(prevSnake => {\n        const head = { ...prevSnake[0] };\n        head.x += direction.x;\n        head.y += direction.y;\n\n        // Check for collisions with walls\n        if (head.x < 0 || head.x >= GRID_SIZE || head.y < 0 || head.y >= GRID_SIZE) {\n          setGameOver(true);\n          return prevSnake;\n        }\n\n        // Check for collisions with self\n        if (prevSnake.some(segment => segment.x === head.x && segment.y === head.y)) {\n          setGameOver(true);\n          return prevSnake;\n        }\n\n        const newSnake = [head];\n        if (head.x === food.x && head.y === food.y) {\n          // Snake ate food\n          setScore(prev => prev + 10);\n          setFood({\n            x: Math.floor(Math.random() * GRID_SIZE),\n            y: Math.floor(Math.random() * GRID_SIZE)\n          });\n          // Increase speed every 50 points\n          if (score % 50 === 0 && speed > 50) {\n            setSpeed(prev => prev - 10);\n          }\n          // Add all previous segments\n          newSnake.push(...prevSnake);\n        } else {\n          // Add all segments except the last one\n          newSnake.push(...prevSnake.slice(0, -1));\n        }\n\n        return newSnake;\n      });\n    };\n\n    if (gameStarted && !gameOver) {\n      gameInterval = setInterval(moveSnake, speed);\n    }\n\n    // Draw game\n    const draw = () => {\n      if (!ctx) return;\n\n      // Clear canvas\n      ctx.fillStyle = '#000000';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n      // Draw snake\n      ctx.fillStyle = '#00ff00';\n      snake.forEach(segment => {\n        ctx.fillRect(\n          segment.x * CELL_SIZE,\n          segment.y * CELL_SIZE,\n          CELL_SIZE - 1,\n          CELL_SIZE - 1\n        );\n      });\n\n      // Draw food\n      ctx.fillStyle = '#ff0000';\n      ctx.fillRect(\n        food.x * CELL_SIZE,\n        food.y * CELL_SIZE,\n        CELL_SIZE - 1,\n        CELL_SIZE - 1\n      );\n\n      // Draw score\n      ctx.fillStyle = '#ffffff';\n      ctx.font = '20px Arial';\n      ctx.fillText(`Score: ${score}`, 10, 30);\n\n      if (!gameStarted) {\n        ctx.fillStyle = '#ffffff';\n        ctx.font = '24px Arial';\n        ctx.textAlign = 'center';\n        ctx.fillText('Press SPACE to Start', canvas.width / 2, canvas.height / 2);\n        ctx.font = '16px Arial';\n        ctx.fillText('Use arrow keys to move', canvas.width / 2, canvas.height / 2 + 30);\n      }\n\n      if (gameOver) {\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.75)';\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n        ctx.fillStyle = '#ffffff';\n        ctx.font = '24px Arial';\n        ctx.textAlign = 'center';\n        ctx.fillText('Game Over!', canvas.width / 2, canvas.height / 2 - 20);\n        ctx.fillText(`Final Score: ${score}`, canvas.width / 2, canvas.height / 2 + 20);\n      }\n    };\n\n    const animationFrame = requestAnimationFrame(draw);\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n      clearInterval(gameInterval);\n      cancelAnimationFrame(animationFrame);\n    };\n  }, [snake, food, direction, gameOver, gameStarted, score, speed]);\n\n  const restartGame = () => {\n    setGameOver(false);\n    setScore(0);\n    setSnake([{ x: 5, y: 5 }]);\n    setFood({ x: 10, y: 10 });\n    setDirection({ x: 1, y: 0 });\n    setGameStarted(false);\n    setSpeed(INITIAL_SPEED);\n  };\n\n  return (\n    <div className=\"snake-game\">\n      <canvas ref={canvasRef} />\n      {gameOver && (\n        <div className=\"game-over\">\n          <button onClick={restartGame}>Play Again</button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SnakeGame; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}