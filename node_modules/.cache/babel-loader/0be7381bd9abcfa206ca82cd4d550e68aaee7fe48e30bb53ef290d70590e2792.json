{"ast":null,"code":"var _jsxFileName = \"/home/yash/Desktop/yashbhangale.github.io/portfolio-terminal/src/components/SnakeGame.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GRID_SIZE = 20;\nconst CELL_SIZE = 20;\nconst INITIAL_SPEED = 150;\nconst SnakeGame = () => {\n  _s();\n  const canvasRef = useRef(null);\n  const [gameOver, setGameOver] = useState(false);\n  const [score, setScore] = useState(0);\n  const [snake, setSnake] = useState([{\n    x: 5,\n    y: 5\n  }]);\n  const [food, setFood] = useState({\n    x: 10,\n    y: 10\n  });\n  const [direction, setDirection] = useState({\n    x: 1,\n    y: 0\n  });\n  const [gameStarted, setGameStarted] = useState(false);\n  const [speed, setSpeed] = useState(INITIAL_SPEED);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Set canvas size\n    canvas.width = GRID_SIZE * CELL_SIZE;\n    canvas.height = GRID_SIZE * CELL_SIZE;\n\n    // Handle keyboard input\n    const handleKeyDown = e => {\n      if (!gameStarted && e.key === ' ') {\n        setGameStarted(true);\n        return;\n      }\n      switch (e.key) {\n        case 'ArrowUp':\n          if (direction.y !== 1) setDirection({\n            x: 0,\n            y: -1\n          });\n          break;\n        case 'ArrowDown':\n          if (direction.y !== -1) setDirection({\n            x: 0,\n            y: 1\n          });\n          break;\n        case 'ArrowLeft':\n          if (direction.x !== 1) setDirection({\n            x: -1,\n            y: 0\n          });\n          break;\n        case 'ArrowRight':\n          if (direction.x !== -1) setDirection({\n            x: 1,\n            y: 0\n          });\n          break;\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n\n    // Game loop\n    let gameInterval;\n    const moveSnake = () => {\n      if (gameOver || !gameStarted) return;\n      setSnake(prevSnake => {\n        const head = {\n          ...prevSnake[0]\n        };\n        head.x += direction.x;\n        head.y += direction.y;\n\n        // Check for collisions with walls\n        if (head.x < 0 || head.x >= GRID_SIZE || head.y < 0 || head.y >= GRID_SIZE) {\n          setGameOver(true);\n          return prevSnake;\n        }\n\n        // Check for collisions with self\n        if (prevSnake.some(segment => segment.x === head.x && segment.y === head.y)) {\n          setGameOver(true);\n          return prevSnake;\n        }\n        const newSnake = [head];\n        if (head.x === food.x && head.y === food.y) {\n          // Snake ate food\n          setScore(prev => prev + 10);\n          setFood({\n            x: Math.floor(Math.random() * GRID_SIZE),\n            y: Math.floor(Math.random() * GRID_SIZE)\n          });\n          // Increase speed every 50 points\n          if (score % 50 === 0 && speed > 50) {\n            setSpeed(prev => prev - 10);\n          }\n          // Add all previous segments\n          newSnake.push(...prevSnake);\n        } else {\n          // Add all segments except the last one\n          newSnake.push(...prevSnake.slice(0, -1));\n        }\n        return newSnake;\n      });\n    };\n    if (gameStarted && !gameOver) {\n      gameInterval = setInterval(moveSnake, speed);\n    }\n\n    // Draw game\n    const draw = () => {\n      if (!ctx) return;\n\n      // Clear canvas\n      ctx.fillStyle = '#000000';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n      // Draw snake\n      ctx.fillStyle = '#00ff00';\n      snake.forEach(segment => {\n        ctx.fillRect(segment.x * CELL_SIZE, segment.y * CELL_SIZE, CELL_SIZE - 1, CELL_SIZE - 1);\n      });\n\n      // Draw food\n      ctx.fillStyle = '#ff0000';\n      ctx.fillRect(food.x * CELL_SIZE, food.y * CELL_SIZE, CELL_SIZE - 1, CELL_SIZE - 1);\n\n      // Draw score\n      ctx.fillStyle = '#ffffff';\n      ctx.font = '20px Arial';\n      ctx.fillText(`Score: ${score}`, 10, 30);\n      if (!gameStarted) {\n        ctx.fillStyle = '#ffffff';\n        ctx.font = '24px Arial';\n        ctx.textAlign = 'center';\n        ctx.fillText('Press SPACE to Start', canvas.width / 2, canvas.height / 2);\n        ctx.font = '16px Arial';\n        ctx.fillText('Use arrow keys to move', canvas.width / 2, canvas.height / 2 + 30);\n      }\n      if (gameOver) {\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.75)';\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n        ctx.fillStyle = '#ffffff';\n        ctx.font = '24px Arial';\n        ctx.textAlign = 'center';\n        ctx.fillText('Game Over!', canvas.width / 2, canvas.height / 2 - 20);\n        ctx.fillText(`Final Score: ${score}`, canvas.width / 2, canvas.height / 2 + 20);\n      }\n    };\n    const animationFrame = requestAnimationFrame(draw);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n      clearInterval(gameInterval);\n      cancelAnimationFrame(animationFrame);\n    };\n  }, [snake, food, direction, gameOver, gameStarted, score, speed]);\n  const restartGame = () => {\n    setGameOver(false);\n    setScore(0);\n    setSnake([{\n      x: 5,\n      y: 5\n    }]);\n    setFood({\n      x: 10,\n      y: 10\n    });\n    setDirection({\n      x: 1,\n      y: 0\n    });\n    setGameStarted(false);\n    setSpeed(INITIAL_SPEED);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"snake-game\",\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this), gameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-over\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: restartGame,\n        children: \"Play Again\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 5\n  }, this);\n};\n_s(SnakeGame, \"HPbJ+U9Aud6pn63m1ASN6vqCgms=\");\n_c = SnakeGame;\nexport default SnakeGame;\nvar _c;\n$RefreshReg$(_c, \"SnakeGame\");","map":{"version":3,"names":["React","useEffect","useRef","useState","jsxDEV","_jsxDEV","GRID_SIZE","CELL_SIZE","INITIAL_SPEED","SnakeGame","_s","canvasRef","gameOver","setGameOver","score","setScore","snake","setSnake","x","y","food","setFood","direction","setDirection","gameStarted","setGameStarted","speed","setSpeed","canvas","current","ctx","getContext","width","height","handleKeyDown","e","key","window","addEventListener","gameInterval","moveSnake","prevSnake","head","some","segment","newSnake","prev","Math","floor","random","push","slice","setInterval","draw","fillStyle","fillRect","forEach","font","fillText","textAlign","animationFrame","requestAnimationFrame","removeEventListener","clearInterval","cancelAnimationFrame","restartGame","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/home/yash/Desktop/yashbhangale.github.io/portfolio-terminal/src/components/SnakeGame.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\n\ninterface Position {\n  x: number;\n  y: number;\n}\n\nconst GRID_SIZE = 20;\nconst CELL_SIZE = 20;\nconst INITIAL_SPEED = 150;\n\nconst SnakeGame: React.FC = () => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const [gameOver, setGameOver] = useState(false);\n  const [score, setScore] = useState(0);\n  const [snake, setSnake] = useState<Position[]>([{ x: 5, y: 5 }]);\n  const [food, setFood] = useState<Position>({ x: 10, y: 10 });\n  const [direction, setDirection] = useState<Position>({ x: 1, y: 0 });\n  const [gameStarted, setGameStarted] = useState(false);\n  const [speed, setSpeed] = useState(INITIAL_SPEED);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Set canvas size\n    canvas.width = GRID_SIZE * CELL_SIZE;\n    canvas.height = GRID_SIZE * CELL_SIZE;\n\n    // Handle keyboard input\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (!gameStarted && e.key === ' ') {\n        setGameStarted(true);\n        return;\n      }\n\n      switch (e.key) {\n        case 'ArrowUp':\n          if (direction.y !== 1) setDirection({ x: 0, y: -1 });\n          break;\n        case 'ArrowDown':\n          if (direction.y !== -1) setDirection({ x: 0, y: 1 });\n          break;\n        case 'ArrowLeft':\n          if (direction.x !== 1) setDirection({ x: -1, y: 0 });\n          break;\n        case 'ArrowRight':\n          if (direction.x !== -1) setDirection({ x: 1, y: 0 });\n          break;\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n\n    // Game loop\n    let gameInterval: NodeJS.Timeout;\n\n    const moveSnake = () => {\n      if (gameOver || !gameStarted) return;\n\n      setSnake(prevSnake => {\n        const head = { ...prevSnake[0] };\n        head.x += direction.x;\n        head.y += direction.y;\n\n        // Check for collisions with walls\n        if (head.x < 0 || head.x >= GRID_SIZE || head.y < 0 || head.y >= GRID_SIZE) {\n          setGameOver(true);\n          return prevSnake;\n        }\n\n        // Check for collisions with self\n        if (prevSnake.some(segment => segment.x === head.x && segment.y === head.y)) {\n          setGameOver(true);\n          return prevSnake;\n        }\n\n        const newSnake = [head];\n        if (head.x === food.x && head.y === food.y) {\n          // Snake ate food\n          setScore(prev => prev + 10);\n          setFood({\n            x: Math.floor(Math.random() * GRID_SIZE),\n            y: Math.floor(Math.random() * GRID_SIZE)\n          });\n          // Increase speed every 50 points\n          if (score % 50 === 0 && speed > 50) {\n            setSpeed(prev => prev - 10);\n          }\n          // Add all previous segments\n          newSnake.push(...prevSnake);\n        } else {\n          // Add all segments except the last one\n          newSnake.push(...prevSnake.slice(0, -1));\n        }\n\n        return newSnake;\n      });\n    };\n\n    if (gameStarted && !gameOver) {\n      gameInterval = setInterval(moveSnake, speed);\n    }\n\n    // Draw game\n    const draw = () => {\n      if (!ctx) return;\n\n      // Clear canvas\n      ctx.fillStyle = '#000000';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n      // Draw snake\n      ctx.fillStyle = '#00ff00';\n      snake.forEach(segment => {\n        ctx.fillRect(\n          segment.x * CELL_SIZE,\n          segment.y * CELL_SIZE,\n          CELL_SIZE - 1,\n          CELL_SIZE - 1\n        );\n      });\n\n      // Draw food\n      ctx.fillStyle = '#ff0000';\n      ctx.fillRect(\n        food.x * CELL_SIZE,\n        food.y * CELL_SIZE,\n        CELL_SIZE - 1,\n        CELL_SIZE - 1\n      );\n\n      // Draw score\n      ctx.fillStyle = '#ffffff';\n      ctx.font = '20px Arial';\n      ctx.fillText(`Score: ${score}`, 10, 30);\n\n      if (!gameStarted) {\n        ctx.fillStyle = '#ffffff';\n        ctx.font = '24px Arial';\n        ctx.textAlign = 'center';\n        ctx.fillText('Press SPACE to Start', canvas.width / 2, canvas.height / 2);\n        ctx.font = '16px Arial';\n        ctx.fillText('Use arrow keys to move', canvas.width / 2, canvas.height / 2 + 30);\n      }\n\n      if (gameOver) {\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.75)';\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n        ctx.fillStyle = '#ffffff';\n        ctx.font = '24px Arial';\n        ctx.textAlign = 'center';\n        ctx.fillText('Game Over!', canvas.width / 2, canvas.height / 2 - 20);\n        ctx.fillText(`Final Score: ${score}`, canvas.width / 2, canvas.height / 2 + 20);\n      }\n    };\n\n    const animationFrame = requestAnimationFrame(draw);\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n      clearInterval(gameInterval);\n      cancelAnimationFrame(animationFrame);\n    };\n  }, [snake, food, direction, gameOver, gameStarted, score, speed]);\n\n  const restartGame = () => {\n    setGameOver(false);\n    setScore(0);\n    setSnake([{ x: 5, y: 5 }]);\n    setFood({ x: 10, y: 10 });\n    setDirection({ x: 1, y: 0 });\n    setGameStarted(false);\n    setSpeed(INITIAL_SPEED);\n  };\n\n  return (\n    <div className=\"snake-game\">\n      <canvas ref={canvasRef} />\n      {gameOver && (\n        <div className=\"game-over\">\n          <button onClick={restartGame}>Play Again</button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SnakeGame; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}